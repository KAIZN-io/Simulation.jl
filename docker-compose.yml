version: "2.1"

services:

  db:
    # Define the environment variables for this container
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    # A health check is used to determine if the container is ready for the other services
    healthcheck:
      # the command executed to test the health of the container
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      # the time between the checks
      interval: 15s
      # the timeout after which a check will be considered failed
      timeout: 3s
      # the amount of retries until the container will be marked unhelthy
      retries: 8
    # the image to use for this service
    image: postgres:11.2-alpine
    # the networks this service is connected to. Networks are defined at the bottom of the file
    networks:
      - db
    # Portmapping for accessing this service from your host machine. <host-port>:<container-port>
    ports:
      - "5433:5432"
    # Defining volumes to persist specific data from within the container
    # This way data will remain throughout restarts of the service
    volumes:
      - userDb:/var/lib/postgresql/data/

  server:
    build:
      context: ./src/python/projectQ
    # The command is appended to the entrypoint specified in the Dockerfile
    command: ["-m", "projectQ.services.server"]
    # Defining which other services are needed for this service to work
    # This will automatically start all dependencies when running `dc up web`
    depends_on:
      db:
        condition: service_healthy
      messageBroker:
        condition: service_healthy
      julia_simulator:
        condition: service_started
      dbWorker:
        condition: service_started
      bundler:
        condition: service_started
    environment:
      - DEBUG
      - FLASK_ENV
      - DB_NAME
      - DB_USER
      - DB_PASSWORD
      - EXCHANGE_EVENTS
    image: janpiotraschke/projectq:py-0.4.0_julia-integration
    networks:
      - db
      - messageBroker
    ports:
      - "8080:5000"
    # Mount the project code into the container, so the container can run it. <host-path>:<container-path>
    volumes:
      - ./src/python/:/projectQ/
      - ./static/:/projectQ/static

  dbWorker:
    command: ["-u", "-m", "dbWorker"]
    depends_on:
      db:
        condition: service_healthy
      messageBroker:
        condition: service_healthy
    environment:
      - DEBUG
      - DB_NAME
      - DB_USER
      - DB_PASSWORD
      - EXCHANGE_EVENTS
      - SERVICE_DB_WORKER
    image: janpiotraschke/projectq:py-0.4.0_julia-integration
    networks:
      - db
      - messageBroker
    volumes:
      - ./src/python/projectQ/:/projectQ/

  py_simulation:
    command: ["-u", "-m", "py_simulation"]
    depends_on:
      messageBroker:
        condition: service_healthy
    environment:
      - DEBUG
      - EXCHANGE_EVENTS
      - SERVICE_SIMULATION_WORKER
    image: janpiotraschke/projectq:py-0.4.0_julia-integration
    networks:
      - messageBroker
    volumes:
      - ./projectQ/:/projectQ/

  julia_simulator:
    build:
      context: ./src/julia/projectQ
      dockerfile: ./services/Simulator/Dockerfile
    command: ["-e", "using Simulator; Simulator.run()"]
    depends_on:
      messageBroker:
        condition: service_healthy
    environment:
      - DEBUG
      - EXCHANGE_EVENTS
      - SERVICE_SIMULATION_WORKER
    image: janpiotraschke/projectq:julia-0.2.0_restructuring
    networks:
      - messageBroker
    volumes:
      - ./src/julia/projectQ/:/projectQ/

  messageBroker:
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 15s
      timeout: 3s
      retries: 8
    image: rabbitmq:3.7.11-rc.2-alpine
    networks:
      - messageBroker

  bundler:
    command: sh -c "npm ci && npm run build"
    image: node:11.10.0-alpine
    volumes:
      - ./src/javascript/projectQ/applications/web:/projectQ/
      - ./static/:/projectQ/static/
    working_dir: /projectQ/

  test_webApp:
    command: sh -c "npm ci && npm run test"
    image: node:11.10.0-alpine
    volumes:
      - ./:/projectQ/
    working_dir: /projectQ/

  test_python:
    command: ["-u", "-m", "unittest", "discover"]
    image: janpiotraschke/projectq:py-0.4.0_julia-integration
    volumes:
      - ./projectQ/:/projectQ/

# Define named volumes for use in the service definitions
volumes:
  userDb:

# Define the networks, so we can assign services to them
networks:
  # The network used for communicating with the database
  db:
  # Network used for communication with the message broker
  messageBroker:

