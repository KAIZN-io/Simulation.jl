# the version of the docker-compose file
version: "2.1"

# list of services - meaning containers - to be managed by docker-compose
services:

  # the user-db container
  db:

    image: postgres

    volumes:
      - user-db:/var/lib/postgresql/data/

    # environment variables which will be accessible in the running container
    # legt Databank simulation_results an
    environment:
      - POSTGRES_DB=simulation_results
      # - POSTGRES_USER=${DB_USERNAME}
      # - POSTGRES_PASSWORD=${DB_PASSWORD}

    # this defines how this container will be rated as "healthy"
    # definiert, wann die Datenbank hochgefahren ist
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      # the time between the checks
      interval: 15s
      # the timeout after which a check will be considered failed
      timeout: 3s
      # the amount of retries until the container will be marked unhelthy
      retries: 8

    # erstellt Portmapping; wenn Rechner angesprochen wird, reicht er es ihn den
    # Container weiter
    # <Port am PC>:<Port am Container>
    ports:
      - "5433:5432"
    networks:
      default:
        aliases:
          - "db_postgres"

  sdtm:
    image: janlucaklees/docker-image-q:0.2.1-web0.4

    # was sdtm braucht: ein hochgefahrene Datenbank (in diesem Beispiel)
    # wie Verzweigungen zwischen Programmen auslegen
    depends_on:
      # the status of the api-db needs to be healthy (see above)
      db:
        condition: service_healthy

    # restart: on-failure

    ports:
      - "8080:5000"

    environment:
      - FLASK_ENV=develompent
      - FLASK_DEBUG=1
      - FLASK_APP=web_interface/routings.py

    # for development we mount the api-server-code into the container, this way changes made to the code are directly synced with the container
    volumes:
      # in welchen Pfad ich mich befinde : WORKDIR von Dockerfile
      - ./:/ProjektQ/

    # Befehl der and ENTRYPOINT aus dem Image dran gehangen wird.
    command: ["-m", "flask", "run", "--host=0.0.0.0"]

    networks:
      default:
        # aliases:
        #   - ${API_SERVER_HOSTNAME}

# Eigenart von docker-compose file; hier nochmal die verwendeten volumes angeben
volumes:
  user-db:

